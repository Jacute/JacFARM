import { API_URI, PAGE_LIMIT, STATUS_OK, type BaseResponse } from "./api";
import type { GetExploitsResponse, GetExploitsShortResponse } from "./responses";

export const getShortExploits = async () => {
    const res = await fetch(`${API_URI}/api/v1/exploits/short`, {credentials: "include"});
    const data: GetExploitsShortResponse = await res.json();

    if (data.status != STATUS_OK) {
        throw Error(data.error);
    }

    return data.exploits;
}

export const getExploits = async (page: number) => {
    const res = await fetch(`${API_URI}/api/v1/exploits?page=${page}&limit=${PAGE_LIMIT}`, {credentials: "include"});
    const data: GetExploitsResponse = await res.json();

    if (data.status != STATUS_OK) {
        throw Error(data.error);
    }

    return {exploits: data.exploits, count: data.count};
}

export const toggleExploit = async (id: string) => {
    const res = await fetch(`${API_URI}/api/v1/exploits/${id}/toggle`, {
        method: "POST",
        credentials: "include"
    });
    const data: BaseResponse = await res.json();

    if (data.status != STATUS_OK) {
        throw Error(data.error);
    }
}

export const uploadExploit = async (file: File, requirements: File | null, name: string, type: string) => {
    const formData = new FormData();
    formData.append("exploit", file);
    if (requirements) {
        formData.append("requirements", requirements);
    }
    formData.append("name", name);
    formData.append("type", type);
    const res = await fetch(`${API_URI}/api/v1/exploits`, {
        method: "POST",
        credentials: "include",
        body: formData
    });
    const data: BaseResponse = await res.json();

    if (data.status != STATUS_OK) {
        throw Error(data.error);
    }
}

export const deleteExploit = async (id: string) => {
    const res = await fetch(`${API_URI}/api/v1/exploits/${id}`, {
        method: "DELETE",
        credentials: "include"
    });
    const data: BaseResponse = await res.json();

    if (data.status != STATUS_OK) {
        throw Error(data.error);
    }
}