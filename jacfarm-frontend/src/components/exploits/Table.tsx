import { useEffect, useState } from 'react'
import { PAGE_LIMIT } from '../../api/api'
import type { Exploit } from '../../models/models'
import { toggleExploit } from '../../api/exploits'
import { toast } from 'react-toastify'

interface props {
    page: number
    exploits: Array<Exploit>
    setExploits: (exploits: Array<Exploit>) => void
    loadExploits: () => void
}

export const ExploitTable = (props: props) => {
    const [contextMenu, setContextMenu] = useState<{
        mouseX: number;
        mouseY: number;
        exploit: Exploit | null;
    } | null>(null);

    useEffect(() => {
        props.loadExploits();
    }, [props.loadExploits]);

    const handleContextMenu = (event: React.MouseEvent, exploit: Exploit) => {
        event.preventDefault();
        setContextMenu(
            contextMenu === null
                ? { mouseX: event.clientX, mouseY: event.clientY, exploit }
                : null,
        );
    };

    const handleClose = () => {
        setContextMenu(null);
    };

    const handleToggle = async () => {
        if (!contextMenu?.exploit) return;

        handleClose();

        try {
            await toggleExploit(contextMenu.exploit.id);
            props.setExploits(
                props.exploits.map(e =>
                    e.id === contextMenu.exploit?.id
                        ? { ...e, is_running: !e.is_running }
                        : e
                )
            );
        } catch (error: any) {
            toast.error(`Error toggling exploit: ${error.message}`);
            return;
        }
    };

    const handleEdit = () => {
        if (!contextMenu?.exploit) return;
        // Тут переход на страницу редактирования или открытие модалки
        console.log("Редактировать", contextMenu.exploit.name);
        handleClose();
    };

    return (
        <div className="table-responsive shadow rounded-3 m-0 p-0">
            <table className="table table-hover table-striped table-bordered align-middle text-center mb-0">
                <thead className="table-primary">
                    <tr>
                        <th className="w-10">№</th>
                        <th className='w-50'>Название</th>
                        <th className='w-20'>Тип</th>
                        <th className='w-20'>Статус</th>
                    </tr>
                </thead>
                <tbody>
                    {props.exploits.map(exploit => (
                        <tr key={exploit.id} onContextMenu={(e) => handleContextMenu(e, exploit)}>
                            <td className="fw-bold">{(props.page - 1) * PAGE_LIMIT + props.exploits.indexOf(exploit) + 1}</td>
                            <td>{exploit.name}</td>
                            <td>{exploit.type}</td>
                            <td>
                                <span className={exploit.is_running ? "text-success" : "text-danger"}>
                                    {exploit.is_running ? "RUNNING" : "STOPPED"}
                                </span>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>

            {contextMenu && (
                <div
                    className="position-fixed bg-white border rounded shadow p-2"
                    style={{
                        top: contextMenu.mouseY,
                        left: contextMenu.mouseX,
                        zIndex: 1000,
                    }}
                >
                    <button className="btn btn-sm btn-primary w-100 mb-1" onClick={handleToggle}>
                        {contextMenu.exploit?.is_running ? "Остановить" : "Запустить"}
                    </button>
                    <button className="btn btn-sm btn-secondary w-100 mb-1" onClick={handleEdit}>
                        Редактировать
                    </button>
                    <button className="btn btn-sm btn-danger w-100" onClick={handleEdit}>
                        Удалить
                    </button>
                </div>
            )}

            {contextMenu && (
                <div
                    className="position-fixed top-0 start-0 w-100 h-100"
                    style={{ zIndex: 999 }}
                    onClick={handleClose}
                />
            )}
        </div>
    )
}
