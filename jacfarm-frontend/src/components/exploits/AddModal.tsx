import { useState } from "react";
import { toast } from "react-toastify";
import { uploadExploit } from "../../api/exploits";

interface props {
    loadExploits: () => void
}

export const AddModal = (props: props) => {
    const [name, setName] = useState<string>("");
    const [type, setType] = useState<string>("python");
    const [executableFile, setExecutableFile] = useState<File | null>(null);
    const [requirementsFile, setRequirementsFile] = useState<File | null>(null);

    const handleSubmit = async () => {
        if (!executableFile) return;
        try {
            await uploadExploit(executableFile, requirementsFile, name, type);
        } catch (error: any) {
            toast.error(`Error sending data: ${error.message}`);
        }
        props.loadExploits();
    }

    const handleExecutableChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            setExecutableFile(e.target.files[0]);
        }
    };

    const handleRequirementsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            setRequirementsFile(e.target.files[0]);
        }
    };

    return (
        <>
            <div className="modal-body d-flex flex-column gap-3">
                {/* Поле для названия */}
                <div>
                    <label htmlFor="name" className="form-label">Название эксплойта</label>
                    <input
                        type="text"
                        id="name"
                        className="form-control"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        placeholder="Введите название эксплойта"
                    />
                </div>

                {/* Выбор типа */}
                <div>
                    <label htmlFor="type" className="form-label">Тип эксплойта</label>
                    <select
                        id="type"
                        className="form-select"
                        value={type}
                        onChange={(e) => setType(e.target.value)}
                    >
                        <option value="python">Python</option>
                        <option value="binary">Binary</option>
                        <option value="bash">Bash</option>
                    </select>
                </div>

                {/* Загрузка исполняемого файла */}
                <div>
                    <label htmlFor="executable" className="form-label">
                        {type === "python" ? "Python файл" : 
                         type === "binary" ? "Бинарный файл" : "Bash скрипт"}
                    </label>
                    <input
                        type="file"
                        id="executable"
                        className="form-control"
                        onChange={handleExecutableChange}
                        accept={type === "python" ? ".py" : 
                               type === "binary" ? "" : ".sh"}
                    />
                </div>

                {/* Загрузка requirements.txt только для Python */}
                {type === "python" && (
                    <div>
                        <label htmlFor="requirements" className="form-label">
                            Requirements.txt (опционально)
                        </label>
                        <input
                            type="file"
                            id="requirements"
                            className="form-control"
                            onChange={handleRequirementsChange}
                            accept=".txt"
                        />
                    </div>
                )}
            </div>
            <div className="modal-footer">
                <button type="button" className="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                <button type="button" className="btn btn-primary" data-bs-dismiss="modal" onClick={handleSubmit}>
                    Сохранить
                </button>
            </div>
        </>
    )
}