// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mocks/queue_mock.go -package=mocks -mock_names=queue=QueueMock .
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "flag_sender/internal/models"
	plugins "flag_sender/pkg/plugins"
	reflect "reflect"
	time "time"

	amqp091 "github.com/rabbitmq/amqp091-go"
	gomock "go.uber.org/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
	isgomock struct{}
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// GetConfigParameter mocks base method.
func (m *Mockstorage) GetConfigParameter(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigParameter", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigParameter indicates an expected call of GetConfigParameter.
func (mr *MockstorageMockRecorder) GetConfigParameter(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigParameter", reflect.TypeOf((*Mockstorage)(nil).GetConfigParameter), ctx, key)
}

// GetFlagValuesByStatus mocks base method.
func (m *Mockstorage) GetFlagValuesByStatus(ctx context.Context, status models.FlagStatus) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagValuesByStatus", ctx, status)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagValuesByStatus indicates an expected call of GetFlagValuesByStatus.
func (mr *MockstorageMockRecorder) GetFlagValuesByStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagValuesByStatus", reflect.TypeOf((*Mockstorage)(nil).GetFlagValuesByStatus), ctx, status)
}

// PutFlags mocks base method.
func (m *Mockstorage) PutFlags(ctx context.Context, flags []*models.Flag) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFlags", ctx, flags)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFlags indicates an expected call of PutFlags.
func (mr *MockstorageMockRecorder) PutFlags(ctx, flags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFlags", reflect.TypeOf((*Mockstorage)(nil).PutFlags), ctx, flags)
}

// UpdateFlagByResult mocks base method.
func (m *Mockstorage) UpdateFlagByResult(ctx context.Context, flag string, result *plugins.FlagResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlagByResult", ctx, flag, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFlagByResult indicates an expected call of UpdateFlagByResult.
func (mr *MockstorageMockRecorder) UpdateFlagByResult(ctx, flag, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlagByResult", reflect.TypeOf((*Mockstorage)(nil).UpdateFlagByResult), ctx, flag, result)
}

// UpdateStatusForOldFlags mocks base method.
func (m *Mockstorage) UpdateStatusForOldFlags(ctx context.Context, flagTTL time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusForOldFlags", ctx, flagTTL)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusForOldFlags indicates an expected call of UpdateStatusForOldFlags.
func (mr *MockstorageMockRecorder) UpdateStatusForOldFlags(ctx, flagTTL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusForOldFlags", reflect.TypeOf((*Mockstorage)(nil).UpdateStatusForOldFlags), ctx, flagTTL)
}

// QueueMock is a mock of queue interface.
type QueueMock struct {
	ctrl     *gomock.Controller
	recorder *QueueMockMockRecorder
	isgomock struct{}
}

// QueueMockMockRecorder is the mock recorder for QueueMock.
type QueueMockMockRecorder struct {
	mock *QueueMock
}

// NewQueueMock creates a new mock instance.
func NewQueueMock(ctrl *gomock.Controller) *QueueMock {
	mock := &QueueMock{ctrl: ctrl}
	mock.recorder = &QueueMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *QueueMock) EXPECT() *QueueMockMockRecorder {
	return m.recorder
}

// GetFlagChan mocks base method.
func (m *QueueMock) GetFlagChan() (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagChan")
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagChan indicates an expected call of GetFlagChan.
func (mr *QueueMockMockRecorder) GetFlagChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagChan", reflect.TypeOf((*QueueMock)(nil).GetFlagChan))
}
