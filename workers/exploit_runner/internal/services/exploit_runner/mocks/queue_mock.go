// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mocks/queue_mock.go -package=mocks -mock_names=queue=QueueMock queue
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "exploit_runner/internal/models"
	"exploit_runner/pkg/rabbitmq_dto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
	isgomock struct{}
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// GetConfigParameter mocks base method.
func (m *Mockstorage) GetConfigParameter(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigParameter", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigParameter indicates an expected call of GetConfigParameter.
func (mr *MockstorageMockRecorder) GetConfigParameter(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigParameter", reflect.TypeOf((*Mockstorage)(nil).GetConfigParameter), ctx, key)
}

// GetExploits mocks base method.
func (m *Mockstorage) GetExploits(ctx context.Context) ([]*models.Exploit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExploits", ctx)
	ret0, _ := ret[0].([]*models.Exploit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExploits indicates an expected call of GetExploits.
func (mr *MockstorageMockRecorder) GetExploits(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExploits", reflect.TypeOf((*Mockstorage)(nil).GetExploits), ctx)
}

// GetTeams mocks base method.
func (m *Mockstorage) GetTeams(ctx context.Context) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockstorageMockRecorder) GetTeams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*Mockstorage)(nil).GetTeams), ctx)
}

// QueueMock is a mock of queue interface.
type QueueMock struct {
	ctrl     *gomock.Controller
	recorder *QueueMockMockRecorder
	isgomock struct{}
}

// QueueMockMockRecorder is the mock recorder for QueueMock.
type QueueMockMockRecorder struct {
	mock *QueueMock
}

// NewQueueMock creates a new mock instance.
func NewQueueMock(ctrl *gomock.Controller) *QueueMock {
	mock := &QueueMock{ctrl: ctrl}
	mock.recorder = &QueueMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *QueueMock) EXPECT() *QueueMockMockRecorder {
	return m.recorder
}

// PublishFlag mocks base method.
func (m *QueueMock) PublishFlag(flag *rabbitmq_dto.Flag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishFlag", flag)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishFlag indicates an expected call of PublishFlag.
func (mr *QueueMockMockRecorder) PublishFlag(flag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishFlag", reflect.TypeOf((*QueueMock)(nil).PublishFlag), flag)
}
