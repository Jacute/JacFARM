// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mocks/storage_mock.go -package=mocks -mock_names=storage=StorageMock storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "exploit_runner/internal/models"
	rabbitmq_dto "exploit_runner/pkg/rabbitmq_dto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// StorageMock is a mock of storage interface.
type StorageMock struct {
	ctrl     *gomock.Controller
	recorder *StorageMockMockRecorder
	isgomock struct{}
}

// StorageMockMockRecorder is the mock recorder for StorageMock.
type StorageMockMockRecorder struct {
	mock *StorageMock
}

// NewStorageMock creates a new mock instance.
func NewStorageMock(ctrl *gomock.Controller) *StorageMock {
	mock := &StorageMock{ctrl: ctrl}
	mock.recorder = &StorageMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *StorageMock) EXPECT() *StorageMockMockRecorder {
	return m.recorder
}

// GetConfigParameter mocks base method.
func (m *StorageMock) GetConfigParameter(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigParameter", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigParameter indicates an expected call of GetConfigParameter.
func (mr *StorageMockMockRecorder) GetConfigParameter(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigParameter", reflect.TypeOf((*StorageMock)(nil).GetConfigParameter), ctx, key)
}

// GetRunningExploits mocks base method.
func (m *StorageMock) GetRunningExploits(ctx context.Context) ([]*models.Exploit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunningExploits", ctx)
	ret0, _ := ret[0].([]*models.Exploit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunningExploits indicates an expected call of GetRunningExploits.
func (mr *StorageMockMockRecorder) GetRunningExploits(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunningExploits", reflect.TypeOf((*StorageMock)(nil).GetRunningExploits), ctx)
}

// GetTeams mocks base method.
func (m *StorageMock) GetTeams(ctx context.Context) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *StorageMockMockRecorder) GetTeams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*StorageMock)(nil).GetTeams), ctx)
}

// Mockqueue is a mock of queue interface.
type Mockqueue struct {
	ctrl     *gomock.Controller
	recorder *MockqueueMockRecorder
	isgomock struct{}
}

// MockqueueMockRecorder is the mock recorder for Mockqueue.
type MockqueueMockRecorder struct {
	mock *Mockqueue
}

// NewMockqueue creates a new mock instance.
func NewMockqueue(ctrl *gomock.Controller) *Mockqueue {
	mock := &Mockqueue{ctrl: ctrl}
	mock.recorder = &MockqueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockqueue) EXPECT() *MockqueueMockRecorder {
	return m.recorder
}

// PublishFlag mocks base method.
func (m *Mockqueue) PublishFlag(flag *rabbitmq_dto.Flag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishFlag", flag)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishFlag indicates an expected call of PublishFlag.
func (mr *MockqueueMockRecorder) PublishFlag(flag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishFlag", reflect.TypeOf((*Mockqueue)(nil).PublishFlag), flag)
}
