package exploit_runner

import (
	"JacFARM/internal/models"
	jacfarm "JacFARM/internal/service/JacFARM"
	"JacFARM/internal/service/exploit_runner/mocks"
	"context"
	"log/slog"
	"testing"
	"time"

	"github.com/jacute/prettylogger"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"go.uber.org/mock/gomock"
)

func TestLoadConfig(t *testing.T) {
	testCtx := context.Background()

	ctl := gomock.NewController(t)
	defer ctl.Finish()
	storageMock := mocks.NewStorageMock(ctl)
	queueMock := mocks.NewQueueMock(ctl)
	fakeLog := slog.New(prettylogger.NewDiscardHandler())

	storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigFlagFormatKey).Return("[A-Z0-9]{31}=", nil)
	teams := []*models.Team{
		{ID: 1, Name: "Team 1", IP: "10.10.1.2"},
		{ID: 2, Name: "Team 2", IP: "10.10.2.2"},
	}
	storageMock.EXPECT().GetTeams(testCtx).Return(teams, nil)
	storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigExploitDuration).Return("5m", nil)
	storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigExploitMaxWorkingTime).Return("10m", nil)
	storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigMaxConcurrentExploits).Return("3", nil)

	er, err := New(fakeLog, storageMock, queueMock, "test/exploit/dir")
	require.NoError(t, err)

	require.Equal(t, er.cfg.flagFormatRegexp.String(), "[A-Z0-9]{31}=")
	require.Equal(t, er.cfg.exploitRunDuration, 5*time.Minute)
	require.Equal(t, er.cfg.exploitMaxWorkingTime, 10*time.Minute)
	require.Equal(t, er.cfg.maxConcurrentExploits, 3)
	require.Len(t, er.cfg.teams, 2)
	require.Equal(t, teams, er.cfg.teams)
}

func TestLoadConfigErrors(t *testing.T) {
	testCtx := context.Background()

	ctl := gomock.NewController(t)
	defer ctl.Finish()
	storageMock := mocks.NewStorageMock(ctl)
	queueMock := mocks.NewQueueMock(ctl)
	fakeLog := slog.New(prettylogger.NewDiscardHandler())

	testcases := []struct {
		name    string
		mock    func() *mocks.StorageMock
		wantErr bool
	}{
		{
			name: "error getting flag format",
			mock: func() *mocks.StorageMock {
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigFlagFormatKey).Return("", assert.AnError)
				return storageMock
			},
			wantErr: true,
		},
		{
			name: "error compiling flag format regexp",
			mock: func() *mocks.StorageMock {
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigFlagFormatKey).Return("[A-Z0-9{31}=", nil)
				return storageMock
			},
			wantErr: true,
		},
		{
			name: "error getting teams",
			mock: func() *mocks.StorageMock {
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigFlagFormatKey).Return("[A-Z0-9]{31}=", nil)
				storageMock.EXPECT().GetTeams(testCtx).Return(nil, assert.AnError)
				return storageMock
			},
			wantErr: true,
		},
		{
			name: "error getting exploit run duration",
			mock: func() *mocks.StorageMock {
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigFlagFormatKey).Return("[A-Z0-9]{31}=", nil)
				storageMock.EXPECT().GetTeams(testCtx).Return([]*models.Team{}, nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigExploitDuration).Return("", assert.AnError)
				return storageMock
			},
			wantErr: true,
		},
		{
			name: "error parsing exploit run duration",
			mock: func() *mocks.StorageMock {
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigFlagFormatKey).Return("[A-Z0-9]{31}=", nil)
				storageMock.EXPECT().GetTeams(testCtx).Return([]*models.Team{}, nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigExploitDuration).Return("invalid_duration", nil)
				return storageMock
			},
			wantErr: true,
		},
		{
			name: "error getting exploit max working time",
			mock: func() *mocks.StorageMock {
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigFlagFormatKey).Return("[A-Z0-9]{31}=", nil)
				storageMock.EXPECT().GetTeams(testCtx).Return([]*models.Team{}, nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigExploitDuration).Return("5m", nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigMaxConcurrentExploits).Return("5", nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigExploitMaxWorkingTime).Return("", assert.AnError)
				return storageMock
			},
			wantErr: true,
		},
		{
			name: "error parsing exploit max working time",
			mock: func() *mocks.StorageMock {
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigFlagFormatKey).Return("[A-Z0-9]{31}=", nil)
				storageMock.EXPECT().GetTeams(testCtx).Return([]*models.Team{}, nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigExploitDuration).Return("5m", nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigMaxConcurrentExploits).Return("5", nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigExploitMaxWorkingTime).Return("invalid_duration", nil)
				return storageMock
			},
			wantErr: true,
		},
		{
			name: "error getting max concurrent exploits",
			mock: func() *mocks.StorageMock {
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigFlagFormatKey).Return("[A-Z0-9]{31}=", nil)
				storageMock.EXPECT().GetTeams(testCtx).Return([]*models.Team{}, nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigExploitDuration).Return("5m", nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigMaxConcurrentExploits).Return("", assert.AnError)
				return storageMock
			},
			wantErr: true,
		},
		{
			name: "error parsing max concurrent exploits",
			mock: func() *mocks.StorageMock {
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigFlagFormatKey).Return("[A-Z0-9]{31}=", nil)
				storageMock.EXPECT().GetTeams(testCtx).Return([]*models.Team{}, nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigExploitDuration).Return("5m", nil)
				storageMock.EXPECT().GetConfigParameter(testCtx, jacfarm.ConfigMaxConcurrentExploits).Return("invalid_number", nil)
				return storageMock
			},
			wantErr: true,
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(tt *testing.T) {
			storageMock := tc.mock()
			er, err := New(fakeLog, storageMock, queueMock, "test/exploit/dir")
			if tc.wantErr {
				require.Error(t, err)
				require.Nil(t, er)
			} else {
				require.NoError(t, err)
				require.NotNil(t, er)
			}
		})
	}
}
