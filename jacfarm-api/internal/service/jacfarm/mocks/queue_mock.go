// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mocks/queue_mock.go -package=mocks -mock_names=queue=QueueMock queue
//

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "JacFARM/internal/http/dto"
	models "JacFARM/internal/models"
	rabbitmq_dto "JacFARM/pkg/rabbitmq_dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
	isgomock struct{}
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// AddTeam mocks base method.
func (m *Mockstorage) AddTeam(ctx context.Context, team *models.Team) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeam", ctx, team)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeam indicates an expected call of AddTeam.
func (mr *MockstorageMockRecorder) AddTeam(ctx, team any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeam", reflect.TypeOf((*Mockstorage)(nil).AddTeam), ctx, team)
}

// CreateExploit mocks base method.
func (m *Mockstorage) CreateExploit(ctx context.Context, exploit *models.Exploit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExploit", ctx, exploit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExploit indicates an expected call of CreateExploit.
func (mr *MockstorageMockRecorder) CreateExploit(ctx, exploit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExploit", reflect.TypeOf((*Mockstorage)(nil).CreateExploit), ctx, exploit)
}

// DeleteExploit mocks base method.
func (m *Mockstorage) DeleteExploit(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExploit", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExploit indicates an expected call of DeleteExploit.
func (mr *MockstorageMockRecorder) DeleteExploit(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExploit", reflect.TypeOf((*Mockstorage)(nil).DeleteExploit), ctx, id)
}

// DeleteTeam mocks base method.
func (m *Mockstorage) DeleteTeam(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockstorageMockRecorder) DeleteTeam(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*Mockstorage)(nil).DeleteTeam), ctx, id)
}

// GetConfig mocks base method.
func (m *Mockstorage) GetConfig(ctx context.Context, filter *dto.GetConfigFilter) ([]*models.Config, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, filter)
	ret0, _ := ret[0].([]*models.Config)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockstorageMockRecorder) GetConfig(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*Mockstorage)(nil).GetConfig), ctx, filter)
}

// GetExploits mocks base method.
func (m *Mockstorage) GetExploits(ctx context.Context, filter *dto.ListExploitsFilter) ([]*models.Exploit, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExploits", ctx, filter)
	ret0, _ := ret[0].([]*models.Exploit)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExploits indicates an expected call of GetExploits.
func (mr *MockstorageMockRecorder) GetExploits(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExploits", reflect.TypeOf((*Mockstorage)(nil).GetExploits), ctx, filter)
}

// GetFlags mocks base method.
func (m *Mockstorage) GetFlags(ctx context.Context, filter *dto.ListFlagsFilter) ([]*models.FlagEnrich, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlags", ctx, filter)
	ret0, _ := ret[0].([]*models.FlagEnrich)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFlags indicates an expected call of GetFlags.
func (mr *MockstorageMockRecorder) GetFlags(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlags", reflect.TypeOf((*Mockstorage)(nil).GetFlags), ctx, filter)
}

// GetShortExploits mocks base method.
func (m *Mockstorage) GetShortExploits(ctx context.Context) ([]*models.ExploitShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortExploits", ctx)
	ret0, _ := ret[0].([]*models.ExploitShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortExploits indicates an expected call of GetShortExploits.
func (mr *MockstorageMockRecorder) GetShortExploits(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortExploits", reflect.TypeOf((*Mockstorage)(nil).GetShortExploits), ctx)
}

// GetShortTeams mocks base method.
func (m *Mockstorage) GetShortTeams(ctx context.Context) ([]*models.ShortTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortTeams", ctx)
	ret0, _ := ret[0].([]*models.ShortTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortTeams indicates an expected call of GetShortTeams.
func (mr *MockstorageMockRecorder) GetShortTeams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortTeams", reflect.TypeOf((*Mockstorage)(nil).GetShortTeams), ctx)
}

// GetStatuses mocks base method.
func (m *Mockstorage) GetStatuses(ctx context.Context) ([]*models.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatuses", ctx)
	ret0, _ := ret[0].([]*models.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatuses indicates an expected call of GetStatuses.
func (mr *MockstorageMockRecorder) GetStatuses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatuses", reflect.TypeOf((*Mockstorage)(nil).GetStatuses), ctx)
}

// GetTeams mocks base method.
func (m *Mockstorage) GetTeams(ctx context.Context, filter *dto.ListTeamsFilter) ([]*models.Team, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx, filter)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockstorageMockRecorder) GetTeams(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*Mockstorage)(nil).GetTeams), ctx, filter)
}

// ListLogLevel mocks base method.
func (m *Mockstorage) ListLogLevel(ctx context.Context) ([]*models.LogLevel, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogLevel", ctx)
	ret0, _ := ret[0].([]*models.LogLevel)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLogLevel indicates an expected call of ListLogLevel.
func (mr *MockstorageMockRecorder) ListLogLevel(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogLevel", reflect.TypeOf((*Mockstorage)(nil).ListLogLevel), ctx)
}

// ListLogs mocks base method.
func (m *Mockstorage) ListLogs(ctx context.Context, filter *dto.ListLogsFilter) ([]*models.Log, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogs", ctx, filter)
	ret0, _ := ret[0].([]*models.Log)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLogs indicates an expected call of ListLogs.
func (mr *MockstorageMockRecorder) ListLogs(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogs", reflect.TypeOf((*Mockstorage)(nil).ListLogs), ctx, filter)
}

// ListModules mocks base method.
func (m *Mockstorage) ListModules(ctx context.Context) ([]*models.Module, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModules", ctx)
	ret0, _ := ret[0].([]*models.Module)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListModules indicates an expected call of ListModules.
func (mr *MockstorageMockRecorder) ListModules(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModules", reflect.TypeOf((*Mockstorage)(nil).ListModules), ctx)
}

// ToggleExploit mocks base method.
func (m *Mockstorage) ToggleExploit(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleExploit", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleExploit indicates an expected call of ToggleExploit.
func (mr *MockstorageMockRecorder) ToggleExploit(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleExploit", reflect.TypeOf((*Mockstorage)(nil).ToggleExploit), ctx, id)
}

// UpdateConfigRow mocks base method.
func (m *Mockstorage) UpdateConfigRow(ctx context.Context, id int64, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigRow", ctx, id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfigRow indicates an expected call of UpdateConfigRow.
func (mr *MockstorageMockRecorder) UpdateConfigRow(ctx, id, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigRow", reflect.TypeOf((*Mockstorage)(nil).UpdateConfigRow), ctx, id, value)
}

// QueueMock is a mock of queue interface.
type QueueMock struct {
	ctrl     *gomock.Controller
	recorder *QueueMockMockRecorder
	isgomock struct{}
}

// QueueMockMockRecorder is the mock recorder for QueueMock.
type QueueMockMockRecorder struct {
	mock *QueueMock
}

// NewQueueMock creates a new mock instance.
func NewQueueMock(ctrl *gomock.Controller) *QueueMock {
	mock := &QueueMock{ctrl: ctrl}
	mock.recorder = &QueueMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *QueueMock) EXPECT() *QueueMockMockRecorder {
	return m.recorder
}

// GetFlagsCount mocks base method.
func (m *QueueMock) GetFlagsCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagsCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagsCount indicates an expected call of GetFlagsCount.
func (mr *QueueMockMockRecorder) GetFlagsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagsCount", reflect.TypeOf((*QueueMock)(nil).GetFlagsCount))
}

// PublishFlag mocks base method.
func (m *QueueMock) PublishFlag(flag *rabbitmq_dto.Flag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishFlag", flag)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishFlag indicates an expected call of PublishFlag.
func (mr *QueueMockMockRecorder) PublishFlag(flag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishFlag", reflect.TypeOf((*QueueMock)(nil).PublishFlag), flag)
}
