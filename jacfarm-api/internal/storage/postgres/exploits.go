package postgres

import (
	"JacFARM/internal/http/dto"
	"JacFARM/internal/models"
	"JacFARM/internal/storage"
	"context"
	"errors"
	"fmt"

	sq "github.com/Masterminds/squirrel"
	"github.com/jackc/pgx/v5"
)

func (s *Storage) GetExploits(ctx context.Context, filter *dto.ListExploitsFilter) ([]*models.Exploit, error) {
	builder := sq.Select("id", "name", "type", "is_running_on_farm", "executable_path", "requirements_path", "is_running").
		From("exploits").
		PlaceholderFormat(sq.Dollar)
	if filter.Limit > 0 {
		builder = builder.Limit(filter.Limit)
		if filter.Page > 0 {
			builder = builder.Offset(filter.Limit * (filter.Page - 1))
		}
	}
	query, args, err := builder.ToSql()
	if err != nil {
		return nil, fmt.Errorf("error building query: %w", err)
	}

	rows, err := s.db.Query(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var exploits []*models.Exploit
	for rows.Next() {
		var exploit models.Exploit
		if err := rows.Scan(&exploit.ID, &exploit.Name, &exploit.Type, &exploit.IsRunningOnFarm, &exploit.ExecutablePath, &exploit.RequirementsPath, &exploit.IsRunning); err != nil {
			return nil, err
		}
		exploits = append(exploits, &exploit)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return exploits, nil
}

func (s *Storage) CreateExploit(ctx context.Context, exploit *models.Exploit) error {
	builder := sq.Insert("exploits").
		Columns("id", "name", "type", "is_running_on_farm", "executable_path", "requirements_path").
		PlaceholderFormat(sq.Dollar)
	valuesMap := map[string]interface{}{
		"id":                 exploit.ID,
		"name":               exploit.Name,
		"type":               exploit.Type,
		"is_running_on_farm": exploit.IsRunningOnFarm,
		"executable_path":    exploit.ExecutablePath,
	}
	if exploit.RequirementsPath != nil && *exploit.RequirementsPath != "" {
		valuesMap["requirements_path"] = exploit.RequirementsPath
	}
	builder = builder.SetMap(valuesMap)

	query, args, err := builder.ToSql()
	if err != nil {
		return fmt.Errorf("error building query: %w", err)
	}

	_, err = s.db.Exec(ctx, query, args...)
	if err != nil {
		return err
	}

	return nil
}

func (s *Storage) ToggleExploit(ctx context.Context, id string) (bool, error) {
	var newValue bool
	err := s.db.QueryRow(ctx, `
		UPDATE exploits
		SET is_running = NOT is_running
		WHERE id = $1
		RETURNING is_running
	`, id).Scan(&newValue)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return false, storage.ErrExploitNotFound
		}
		return false, err
	}

	return newValue, err
}

func (s *Storage) DeleteExploit(ctx context.Context, id string) error {
	cmd, err := s.db.Exec(ctx, `
		DELETE FROM exploits
		WHERE id = $1
	`, id)
	if err != nil {
		return err
	}

	if cmd.RowsAffected() == 0 {
		return storage.ErrExploitNotFound
	}

	return nil
}
