package postgres

import (
	"JacFARM/internal/http/dto"
	"JacFARM/internal/models"
	"context"
	"fmt"

	sq "github.com/Masterminds/squirrel"
)

func (s *Storage) GetExploits(ctx context.Context, filter *dto.ListExploitsFilter) ([]*models.Exploit, error) {
	builder := sq.Select("id", "name", "type", "is_running_on_farm", "executable_path", "requirements_path", "is_running").
		From("exploits").
		PlaceholderFormat(sq.Dollar)
	if filter.Limit > 0 {
		builder = builder.Limit(filter.Limit)
		if filter.Page > 0 {
			builder = builder.Offset(filter.Limit * (filter.Page - 1))
		}
	}
	query, args, err := builder.ToSql()
	if err != nil {
		return nil, fmt.Errorf("error building query: %w", err)
	}

	rows, err := s.db.Query(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var exploits []*models.Exploit
	for rows.Next() {
		var exploit models.Exploit
		if err := rows.Scan(&exploit.ID, &exploit.Name, &exploit.Type, &exploit.IsRunningOnFarm, &exploit.ExecutablePath, &exploit.RequirementsPath, &exploit.IsRunning); err != nil {
			return nil, err
		}
		exploits = append(exploits, &exploit)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return exploits, nil
}

func (s *Storage) CreateExploit(ctx context.Context, exploit *models.Exploit) error {
	_, err := s.db.Exec(ctx, `INSERT INTO exploits
	(id, name, type, is_running_on_farm, executable_path, requirements_path)
	VALUES ($1, $2, $3, $4, $5, $6)`,
		exploit.ID, exploit.Name, exploit.Type, exploit.IsRunningOnFarm, exploit.ExecutablePath, exploit.RequirementsPath)
	if err != nil {
		return err
	}
	return nil
}
